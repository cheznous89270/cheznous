@use "sass:map";
@use "breakpoints" as *;

// Responsive typography mixin
@mixin responsive-font($min-size, $max-size) {
    font-size: clamp($min-size, 0.05 * calc(100 * var(--vw, 1vw)), $max-size);
}

// Breakpoint mixin
@mixin breakpoint($size) {
    @if map.has-key($breakpoints, $size) {
        @media (min-width: map.get($breakpoints, $size)) {
            @content;
        }
    } @else {
        @error 'Invalid breakpoint size: #{$size}.';
    }
}

// Range mixin
@mixin range($start, $end: null) {
    @if map.has-key($breakpoints, $start) {
        $min: map.get($breakpoints, $start);
        $max: if(
            $end != null and map.has-key($breakpoints, $end),
            map.get($breakpoints, $end),
            null
        );

        @if $max {
            @media (min-width: $min) and (max-width: $max) {
                @content;
            }
        } @else {
            @media (max-width: $min) {
                @content;
            }
        }
    } @else {
        @error 'Invalid breakpoint size: #{$start}.';
    }
}

// Flexbox mixins
@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-between {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

// Transition mixin
@mixin transition($properties...) {
    $transitions: ();
    @each $property in $properties {
        $transitions: append($transitions, $property 0.3s ease-in-out, comma);
    }
    transition: $transitions;
}

// _mixins.scss ou _placeholders.scss

@mixin section-divider {
    content: "═════ ◈ ═════";
    font-size: clamp(2rem, 0.05 * calc(100 * var(--vw, 1vw)), 6rem);
    font-weight: var(--weight-light);
    font-family: var(--font-heading);
    display: block;
    text-align: center;
    width: 100%;
}

@mixin hide-on($breakpoints) {
    @include breakpoint($breakpoints) {
        display: none !important;
    }
}
