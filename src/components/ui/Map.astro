---
interface Props {
    src: string;
    title?: string;
    width?: number;
    height?: number;
    ratio?: "16/9" | "4/3" | "1/1" | "21/9";
    loading?: "lazy" | "eager";
    allowFullScreen?: boolean;
}

const {
    src,
    title = "Carte interactive",
    width,
    height,
    ratio = "16/9",
    loading = "lazy",
    allowFullScreen = true,
} = Astro.props;

const hasFixedSize = width && height;
const ratioMap = {
    "16/9": "56.25%",
    "4/3": "75%",
    "1/1": "100%",
    "21/9": "42.85%",
};
const paddingBottom = ratioMap[ratio] ?? "56.25%";
---

<div
    class="c-iframe-embed map-container"
    data-src={src}
    data-title={title}
    data-loading={loading}
    data-allow-fullscreen={allowFullScreen.toString()}
    style={hasFixedSize
        ? `width: ${width}px; height: ${height}px;`
        : `--aspect-ratio: ${paddingBottom};`}
>
    <div class="map-placeholder">
        <p>
            La carte Google Maps est désactivée jusqu'à ce que vous acceptiez
            les cookies.
        </p>
        <button
            class="map-consent-button"
            type="button"
            data-cc="show-preferencesModal"
            >Gérer les préférences en matière de cookies</button
        >
    </div>
</div>

<style>
    .c-iframe-embed {
        position: relative;
        width: 100%;
        margin-inline: auto;
        max-width: 100%;
        overflow: hidden;
    }
    @media (min-width: 1024px) {
        .c-iframe-embed {
            max-width: 100%;
        }
    }
    .c-iframe-embed::before {
        content: "";
        display: block;
        padding-bottom: var(--aspect-ratio, 56.25%);
    }
    .c-iframe-embed iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: block;
        border: 0;
    }
    .map-placeholder {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        background: #fff4e5;
        padding: 1rem;
        border-radius: 8px;
        border: 1px dotted var(--color-link);
        box-sizing: border-box;
    }
    .map-consent-button {
        margin-top: 1rem;
        padding: 0.5rem 1rem;
        background-color: #889b4a;
        color: var(--color-landing-ui-light);
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        transition: background-color 0.3s ease-in-out;
    }
    .map-consent-button:hover {
        background-color: #98676a;
    }
</style>

<script>
    interface MapContainerElement extends HTMLDivElement {
        dataset: {
            src: string;
            title: string;
            loading: string;
            allowFullscreen: string;
        };
    }

    interface MapConsentChangedEventDetail {
        maps?: boolean;
    }

    function initializeMapLogic(): void {
        const mapContainers =
            document.querySelectorAll<MapContainerElement>(".map-container");

        if (mapContainers.length === 0) {
            console.log("No map containers found on the page");
            return;
        }

        console.log(`Found ${mapContainers.length} map containers`);

        function updateMaps(explicitConsent?: boolean): void {
            let hasConsent: boolean;

            if (typeof explicitConsent === "boolean") {
                hasConsent = explicitConsent;
            } else if (window.cookieConsent) {
                hasConsent =
                    window.cookieConsent.acceptedCategory("maps") || false;
            } else {
                hasConsent = false;
            }

            mapContainers.forEach((container, index) => {
                const existingIframe =
                    container.querySelector<HTMLIFrameElement>("iframe");
                const placeholder =
                    container.querySelector<HTMLDivElement>(".map-placeholder");

                if (hasConsent) {
                    if (!existingIframe) {
                        if (placeholder) placeholder.style.display = "none";

                        const iframe = document.createElement("iframe");
                        iframe.src = container.dataset.src;
                        iframe.title = container.dataset.title;
                        iframe.loading = container.dataset.loading as
                            | "lazy"
                            | "eager";
                        iframe.allowFullscreen =
                            container.dataset.allowFullscreen === "true";
                        iframe.referrerPolicy = "no-referrer-when-downgrade";
                        iframe.style.border = "0";
                        iframe.style.borderRadius = "8px";
                        iframe.style.width = "100%";
                        iframe.style.height = "100%";
                        iframe.style.position = "absolute";
                        iframe.style.top = "0";
                        iframe.style.left = "0";

                        container.appendChild(iframe);
                    }
                } else {
                    if (existingIframe) {
                        console.log(`Removing iframe from container ${index}`);
                        existingIframe.remove();
                    }

                    if (placeholder) placeholder.style.display = "flex";
                }
            });
        }

        window.addEventListener("cookieConsentChanged", (event: Event) => {
            console.log("Cookie consent changed event received");
            const customEvent =
                event as CustomEvent<MapConsentChangedEventDetail>;

            if (
                customEvent.detail &&
                typeof customEvent.detail.maps === "boolean"
            ) {
                updateMaps(customEvent.detail.maps);
            } else {
                updateMaps();
            }
        });

        window.addEventListener("cookieConsentInitialized", () => {
            console.log("Cookie consent initialized");
            updateMaps();
        });

        if (window.cookieConsent) {
            console.log("Cookie consent already available on page load");
            updateMaps();
        } else {
            console.log("Waiting for cookie consent to be initialized");
        }
    }

    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", initializeMapLogic);
    } else {
        initializeMapLogic();
    }
</script>
